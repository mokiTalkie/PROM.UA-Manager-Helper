# from flask import Blueprint, jsonify, render_template, request
# import asyncio
# from external_api.openai_api import TextHelper
# from templates.text_templates import (
#     PRODUCT_TOOL_HEAD,
#     PRODUCT_TOOL_DESCRIPTION,
#     CATEGORY_TOOL_HEAD,
#     CATEGORY_TOOL_DESCRIPTION,
# )

# tools = Blueprint("tool", __name__, url_prefix="/tool/")


# @tools.get("/product")
# def product_load() -> str:
#     """
#     Display the 'product' page.

#     Returns:
#         str: The rendered HTML content for the 'product' page.
#     """

#     return render_template(
#         "main_template.html",
#         route_product="product",
#         route_category="category",
#         content=render_template(
#             "product_tool.html",
#         ),
#     )


# async def async_ai_request_for_product(user_input: str) -> list[str]:
#     """
#     Retrieves product search queries and descriptions for a given product name.

#     Args:
#         user_input (str): A string containing the name of the product to search for.

#     Returns:
#         A list of strings containing the search queries and descriptions for the specified product.
#     """

#     return await asyncio.gather(
#         TextHelper.get_product_search_queries(product_name=user_input),
#         TextHelper.get_product_description(product_name=user_input),
#     )


# @tools.post("/product")
# def generate_product() -> str:
#     """
#     A route function that generates a product description and tags based on user input.

#     Returns:
#     str: A JSON response containing the tags and description generated by an AI model.
#     """

#     user_input = request.form.get("input")
#     ai_response = asyncio.run(async_ai_request_for_product(user_input=user_input))
#     return jsonify(
#         {"tags": ai_response[0].strip(), "description": ai_response[1].strip()}
#     )


# @tools.get("/category")
# def category_load() -> str:
#     """
#     Handle a GET request to load the category page.

#     Returns:
#         A Flask Response object containing the rendered HTML for the category page.
#     """

#     return render_template(
#         "main_template.html",
#         route_product="product",
#         route_category="category",
#         content=render_template(
#             "category_tool.html",
#         ),
#     )


# async def openai_request_for_category(user_input: str) -> list[str]:
#     """
#     Send a request to the OpenAI API to get search queries and description for a given category.

#     Args:
#         user_input: A string representing the name of the category to search for.

#     Returns:
#         A list of two strings, representing the search queries and description for the specified category.
#     """

#     return await asyncio.gather(
#         TextHelper.get_category_search_queries(category_name=user_input),
#         TextHelper.get_category_description(category_name=user_input),
#     )


# @tools.post("/category")
# def generate_category() -> str:
#     """
#     Endpoint for generating a category description and search queries based on user input.

#     Returns:
#         str: A JSON response containing tags and a description.
#     """
#     user_input = request.form.get("input")
#     ai_response = asyncio.run(openai_request_for_category(user_input=user_input))
#     return jsonify(
#         {"tags": ai_response[0].strip(), "description": ai_response[1].strip()}
#     )
